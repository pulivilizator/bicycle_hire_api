version: "3.8"

services:
  app:
    &bicycle
    build:
      context: .
      dockerfile: Dockerfile
    command: gunicorn bicycle_hire_api.wsgi:application --bind 0.0.0.0:8000
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DEBUG_MODE=${DEBUG_MODE}

      - DB_PROD_NAME=${DB_PROD_NAME}
      - DB_TEST_NAME=${DB_TEST_NAME}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}

      - CELERY_REDIS_HOST=${CELERY_REDIS_HOST}
      - CELERY_REDIS_PORT=${CELERY_REDIS_PORT}
      - CELERY_REDIS_DB=${CELERY_REDIS_DB}

      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_PORT=${EMAIL_PORT}
    env_file:
      - .env
    restart: always
    depends_on:
      redis:
        condition: service_healthy
      app_celery:
        condition: service_started

  app_celery:
    <<: *bicycle
    command: celery -A bicycle_hire_api worker --loglevel=info
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy

  redis:
    image: redis:7.2.4
    restart: always
    volumes:
      - redis-data:/data
    hostname: redis
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 30

  nginx:
    build: ./nginx
    restart: always
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      app:
        condition: service_started
      app_celery:
        condition: service_started

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot/ --email mail@gmail.com --agree-tos --no-eff-email -d domain.com -d www.domain.com
    depends_on:
      nginx:
        condition: service_started

volumes:
  redis-data: